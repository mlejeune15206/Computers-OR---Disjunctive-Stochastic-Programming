################################################################
## Run Model & Data 1 - Decomposition Method
## Sept 6, 2018 - Part (2) (b) 
################################################################
reset;
reset;

model NPD1_Decomp-Nov15_2017.mod;
data Data_NPD1_2017-11-22_1.dat;
problem DECOMPO: OBJ_VAR_DECOMP, x, beta, 1c_DECOMP, 1d_DECOMP, 2c_DECOMP, 2d_DECOMP; #, STREN;

#let KK_test:=500;
let p:=1;
set RValues:= {7}; 
set KK_test_values:= {1000}; #{50, 100, 150, 200, 250};
param RR;

param sum_ind{k in K_test, kk in k+1..card(K_test), t in Tilde_T}>=0, default 0;

for {FFF in RValues}{
for {GGG in KK_test_values}{
#display R >> Results-NPD1_SEPT6.txt; 
for{j in 3..14} {
let R:=FFF; 
let KK_test:=GGG; 

let r:=j;
option presolve 0;
option solver cplex;
option cplex_options 'time=1000' 'threads=1'; 
solve DECOMPO > NPD1-SEPT6_out.txt;

display DECOMPO.result;
display r;
if DECOMPO.result = "solved" then break;
}
display _ampl_elapsed_time, _total_solve_time, x, r, p, R, KK_test >> Results-NPD1_SEPT6.txt; 
}
}


########################################################
stop;
########################################################
for{t in Tilde_T} {
	for{k in K_test} {
		for{kk in K_test: kk > k} {
                for{i in Ct[t]} { 
			if(M_intermediary_tilde_xi[k,i]<=M_intermediary_tilde_xi[kk,i])
			then {
					let sum_ind[k,kk,t]:=sum_ind[k,kk,t]+1;}
			};

		};
	};
};

let {k in K_test, kk in k+1..card(K_test), t in Tilde_T} indicator[k,kk,t]:= if sum_ind[k,kk,t] = card(Ct[t]) then 1 else 0;

if Time[3].dual = previous_dual then continue;
break


repeat while Time[3].dual > 0 { . . . };
repeat until Time[3].dual = 0 { . . . };
repeat { . . . } while Time[3].dual > 0;
repeat { . . . } until Time[3].dual = 0;


solve sub_problem; 
if sub_problem.result= "infeasible" then { 
let nsoln:= nsoln +1; 
for {j in t1} {let Ljinf[nsoln,j] := Lj[j];} 
for {k in t2}  {let Lkinf[nsoln,k] := Lk[k];} 
} 
else if sub_problem.result = "solved" then { 